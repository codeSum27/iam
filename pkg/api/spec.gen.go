// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RWW1OjSBT+K1TvPpLQIaAJT6uj5WRLnUv0xSkr1YEDtALN9iWOa+W/b3WDCRhMMlu6",
	"l5q30Pn6XL7zndPnCYUsL1kBhRQoeEIiTCEn5ucVu4fiK4iSFQL0QclZCVxSMH+TMAQhZlKj9Dd8J3mZ",
	"AQrQxdUXfHn3+/1N/sX/dHXhXp6cDm6ubu4uz27ym7vJENlIPpYaKSSnRYKWNoLvJeUgZrRt6wDjFZgW",
	"EhLgGm2czqrzpudjIBz4pv2ljTj8oSiHCAXf2qHfrtBsfgeh1PavBfBzllTBtNMuiRAPjEdtx543Hg5d",
	"bzyeR/MY668oDonre97YHRwMYDA/9AdwGPskPATwD/AIDzw8JuMoioexHyMbxYznRKJg7aGDJiWAFyR/",
	"kTYJ3YiSnWmvLttrH69l/3rdQw5EQjTTsTaDcLHr9rDXw2ML48DDAcbNrCIioSep8b5Z/ZzQrCun3xL9",
	"Tz9kedNWBe+yU5B5BqY2EcREZRIFkiuw14arz/rmnLEMSKGv0hcVjTwgeO56vdEIj3reKBr25gdj6Hmj",
	"8MD3x+D74DVjUop2ViwjQs4yraVdjPk/wlhlMSY0m4VMFbKVMm7k63f1z6aEpqCK5KMqrHPo9Pfvyv75",
	"v1mYkiLpEN/evHGWwWwz/a+fzk9nRycXk8vOriujTsnv7fWH27azJ6c0KVS52ZFv1T3v1QL/N7X9PY28",
	"9WSuebNX9VqHtTm0tUFaxKwaAyLktJSUFShAVykVlgC+oCFYJWcLGoGwiJIpFJKGRMMsUkTmiHH6Z3US",
	"M27pqJCNMhpC/RJUCaKjkoQp9Nw+ts7rP22keIYClEpZisBxHh4e+sTA+ownTm1DOOeTD6eX01N9t5/K",
	"PDOvOZWGrA8sgqnKLUq0XhfARZWCxmINZCUUpKQoQENzpNmSqekBR4fvZKs3mwnTq7pNTEKTCAXoMxPy",
	"SMm0etqrEoCQxyx6NC8bKyRUo5SUZVaT49wJVqxXI/3rVw4xCtAvznp3curFyVmvDst2lfXDYw6qh9VE",
	"7WL8Zo7b65px3laCicrS8VlTZTYgiIwShcpzwh9bEC1ZkgizLSmZolsNXJHMlNyLZY3bSNnbFGkF3Rnb",
	"M2ZLcGI9I7cGV8/S99NA7WAvEQze1PM2DeiorsvtRDcw3UTruWAiT6CD4TOQ1wbwjlrfleYZVEIRrya5",
	"QjRSNPOukaLzRKNlJdYMJGymemLOtZnjx0lkxhEnOUhDz7eXIjekG5ieUWZ0PQ/5AJmXs60Tu0HGjjd2",
	"ebtPl1Xhbi9+A7PJjL214v89Dv55we3UWxeppeog9drsnD87rxUL26ltYDqaWUOBL7ppmz6QJAH+Uc2t",
	"o88T60hJZl2w8F4n/nKjWVAuK0t9UV1L1Vzv1k615Dl6fREqd57XlaeGgcBxSEn79WJobi1cpKmt430Z",
	"Wb171RU0X9piG2Rm8gpkvpa3y78CAAD//xk971XTEQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
