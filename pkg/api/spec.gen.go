// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RWW1PrNhD+Kx61j07sJDYn8VPhwHDSAc4l8MIZJqPYa1tgW6ou4VAm/70jySQ2MQFa",
	"6GX6ZsmfVrvffrvaexTTktEKKilQdI9EnEOJzec5vYHqGwhGKwF6g3HKgEsC5jeOYxBiLjVKr+EHLlkB",
	"KEKn51/9s+tfby7Lr+Hn89Ph2eHR4PL88vrs+LK8vJ6OkIvkHdNIITmpMrRyEfxghIOYk7atPd9fg0kl",
	"IQOu0ebSud1v3nwAmAPftr9yEYffFOGQoOh72/WrNZouriGW2v6FAH5CM+tMO2yGhbilPGlfHAST0WgY",
	"TCaLZJH6epWkMR6GQTAZDvYGMFh8CAfwIQ1x/AEg3PPH/iDwJ3iSJOkoDVPkopTyEksUbW7ooEkJ4BUu",
	"H4WN42FC8LNhrw+7mzueiv7pvMccsIRkrn2933idYAk9SYz17eyWmBRdPv+S6T/9mJZNBiy8y06FFwUY",
	"7hNIsSokiiRX4G4M22V9ckFpAbjSR8mjjCUBYH8xDHrjsT/uBeNk1FvsTaAXjOO9MJxAGELQ9Ekp0pmR",
	"Ags5L7RWXsWIPZFiUsxjqirZCslvxBN26X9bAjNQVfZJVc4JdN73z8r24d88znGVvVI8nBYw34742+eT",
	"o/n+4en0rLNQWPJqlb66uDorZ0aySrHtunmrGngvIf/XNPXnZPFX+qfhrauJ1uS566RtfNvur9oqqVJq",
	"K17EnDBJaIUidJ4T4QjgSxKDwzhdkgSEg5XMoZIkxhrm4CoxW5ST3+1OSrmjvUIuKkgMddO2UaJ9huMc",
	"esO+75zUP12keIEilEvJROR5t7e3fWxgfcozr7YhvJPpx6Oz2ZE+289lWZiHl0jD2EeawEyVDsFatEvg",
	"woagsb4GUgYVZgRFaGS2NFsyN4Xgafe9Yv28UmFqVNeKCWiaoAh9oULuK5nbV9jmAYQ8oMmdeYRoJcF2",
	"TcxYUZPjXQtabaYY/fUzhxRF6CdvM+Z49YzjbV75VTvV+g0xG/YNNF4Pff/NLm5PVubythKMV472z5kp",
	"M6xAYuQoVFlifteCaN3iTJjBRskcXWngmmSq5ItY1ritkINtkVros749YHY4JzaNcqdzdUN9Pw3UF7xI",
	"BIM3vXmXBrRXF2w30Q1MN9G6LxjPM+hg+BjkhQG8o9afC/MYrFDEk0GuEY0QTb9rhOjdk2RlxVqAhO1Q",
	"D82+NnNwN01MO+K4BGno+f5Y5IZ0A9M9yrSuhyYf2WegrRO3QcYzD+3q6iVVZt3dnfwGZpsZd2fG/30c",
	"/P2Ce1ZvXaQy1UHqhZk1/++8WhZ2U9vAdBSzhgJfdtM2u8VZBvyTWjj7X6bOvpLUOaXxjQ788USzJFxa",
	"S31hj+VqoQdsz056nh5fhCq9h3HlvmEg8jzMSL+eDs2p5RBpamt/H3tWz151Bs1KW2yDTE9eg8xqdbX6",
	"IwAA//++k9IkfhEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
