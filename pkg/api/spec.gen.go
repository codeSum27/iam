// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9yXX2/bNhDAvwrBDRhQqJab9MlvaZMGBrasWOO9bEHAiSeLjURy5CmuF/i7DzxKsRLR",
	"Xpu1W92nMDzeX/7uKN/xwjTWaNDo+eyO+6KCRtDyzDnjwsI6Y8GhAtoujITwtzSuEchnXGk8PuIZx7WF",
	"+C8swfFNxhvwXizpdCf06JRe8s0m4w7+bJUDyWe/RZvb81f3xswf76HAYOvS3IAeRyOKAry/xl4qwRdO",
	"WVRG8xk/ISkjXVYax1oPbhtqH03G4YNVDvx1SOixkTOSMVQNJLN0UDrw1b/S3RH/L1E8SCDmy+L5RCIk",
	"uI7bj61dri0wU7JhzSZjI5tE9RehbqPiQyNUnUg6bO8tt5JjrcVifrpXSavi5kI0icQuVHGjRUPJ7dK2",
	"wvuVcQnHbzvJHuePcI15D2yOgQ0qSpcmdoxGURAdmuLnr40E3zYhroexBMG7tmFKNMyDu1UFUFih/uyk",
	"xQo0qkLQ6YzXqgDtYWD4xIqiAnY0mfKMt67mM14hWj/L89VqNREknhi3zDtdn/84f3128e7s+dFkOqmw",
	"qYkihTU8DIdn/Bacj2G+mEwnR+GgsaCFVXzGjydTcmoFVgRHTnzR0hqPKbixdTqi/HtIJ6BFqc1l8O1A",
	"IFx2oIfyg8dXRq77koImo8LauitJ/t4bvZ1iYfW9g5LP+Hf5dszl3YzLCWq6qYeB/UwLUbPBNlOaPftJ",
	"uBtpVvoZH/KArgUCxFsTKhrcHk1ffLYwYwkSccapEOskw228nB6PyzzXt6JWkokWK+PUXxQCQVWQZjdL",
	"SP1loi0DedogK02rZSS2FG2Nny2/+M4k8ms1fLBQIEgG3ZmMo1j60IOxKldhqyMtv1NyE5wtIUHbr+BU",
	"uaZG+sHvhO4csCfOCicaQHDB3R1XwUgFQtJ86NuNJunzfhpv8x3Njx0GugH/cRYSFzM/5Vm0HPpua1fJ",
	"EaL7jF+N8J3+V/i+6bH6RHiXgP9AbrT/laMb3ps9MzI2N1GboPWt8bggA4c6IBNID+bZ13FdscKD67of",
	"NBJqwMT3yCnt77q1KA3CV+u5fNqk+fjW/j/mRsJhTPopjR6LHD/MDu2R6tHJ0m/SOeAuSM4Bv2VCvuh4",
	"eqO0ZIt7Xj75WTlw1GybQG1hZf+QMClQJJCLRxbxB9CBE3dgb+GX74nB/T+hK9qofdCNsdls/g4AAP//",
	"tGzj0O0SAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
