// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /tokens)
	CreateToken(ctx echo.Context) error

	// (GET /tokens/{id})
	GetToken(ctx echo.Context, id string, params GetTokenParams) error

	// (POST /users)
	PostUsers(ctx echo.Context) error

	// (DELETE /users/{id})
	DeleteUserById(ctx echo.Context, id string, params DeleteUserByIdParams) error

	// (GET /users/{id})
	GetUserById(ctx echo.Context, id string, params GetUserByIdParams) error

	// (PUT /users/{id})
	UpdateUser(ctx echo.Context, id string, params UpdateUserParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateToken converts echo context to params.
func (w *ServerInterfaceWrapper) CreateToken(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateToken(ctx)
	return err
}

// GetToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetToken(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTokenParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Access-token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Access-token")]; found {
		var AccessToken string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Access-token, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Access-token", runtime.ParamLocationHeader, valueList[0], &AccessToken)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Access-token: %s", err))
		}

		params.AccessToken = &AccessToken
	}
	// ------------- Optional header parameter "Refresh-token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Refresh-token")]; found {
		var RefreshToken string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Refresh-token, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Refresh-token", runtime.ParamLocationHeader, valueList[0], &RefreshToken)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Refresh-token: %s", err))
		}

		params.RefreshToken = &RefreshToken
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetToken(ctx, id, params)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// DeleteUserById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUserById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteUserByIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Access-token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Access-token")]; found {
		var AccessToken string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Access-token, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Access-token", runtime.ParamLocationHeader, valueList[0], &AccessToken)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Access-token: %s", err))
		}

		params.AccessToken = AccessToken
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Access-token is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUserById(ctx, id, params)
	return err
}

// GetUserById converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserByIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Access-token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Access-token")]; found {
		var AccessToken string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Access-token, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Access-token", runtime.ParamLocationHeader, valueList[0], &AccessToken)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Access-token: %s", err))
		}

		params.AccessToken = AccessToken
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Access-token is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserById(ctx, id, params)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateUserParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Access-token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Access-token")]; found {
		var AccessToken string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Access-token, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Access-token", runtime.ParamLocationHeader, valueList[0], &AccessToken)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Access-token: %s", err))
		}

		params.AccessToken = AccessToken
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Access-token is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateUser(ctx, id, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/tokens", wrapper.CreateToken)
	router.GET(baseURL+"/tokens/:id", wrapper.GetToken)
	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.DELETE(baseURL+"/users/:id", wrapper.DeleteUserById)
	router.GET(baseURL+"/users/:id", wrapper.GetUserById)
	router.PUT(baseURL+"/users/:id", wrapper.UpdateUser)

}
